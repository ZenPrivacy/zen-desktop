name: Build & Release

env:
  SIGNPATH_ORG_ID: 4e46fe22-9387-4cc4-b458-ca6542b30ae7
  SIGNPATH_PROJECT_SLUG: zen-desktop
  SIGNPATH_SIGNING_POLICY_SLUG: release-signing
  SIGNPATH_ARTIFACT_CONFIG_SLUG: ci-bundle

on:
  push:
    branches: [master]
    tags: ['v*']
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  checks: write

jobs:
  build-linux:
    name: Build Linux (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
          - arch: arm64
            runner: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: go.mod
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: frontend/package.json
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
      - uses: arduino/setup-task@b91d5d2c96a56797b48ac1e0e89220bf64044611 # v2.0.0
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Linux dependencies
        run: task build:deps
      - name: Build & Archive Linux binaries
        run: |
          task build:prod ARCH=${{ matrix.arch }}
          tar -czvf Zen_linux_${{ matrix.arch }}.tar.gz -C build/bin Zen
          task build:prod-noupdate ARCH=${{ matrix.arch }}
          tar -czvf Zen_linux_${{ matrix.arch }}_noselfupdate.tar.gz -C build/bin Zen
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: linux-${{ matrix.arch }}
          path: |
            Zen_linux_${{ matrix.arch }}.tar.gz
            Zen_linux_${{ matrix.arch }}_noselfupdate.tar.gz

  build-macos:
    name: Build macOS (${{ matrix.arch }})
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: go.mod
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: frontend/package.json
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
      - uses: arduino/setup-task@b91d5d2c96a56797b48ac1e0e89220bf64044611 # v2.0.0
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install macOS dependencies
        run: task build:deps
      - name: Set up keychain profile
        env:
          CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
          CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
          CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
        run: |
          CI_KEYCHAIN_PWD=$CI_KEYCHAIN_PWD \
          CERTIFICATE=$CERTIFICATE \
          CERTIFICATE_PWD=$CERTIFICATE_PWD \
          task build:setup-keychain
      - name: Build & archive macOS artifacts
        env:
          CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
          NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
        run: |
          CERTIFICATE_NAME=$CERTIFICATE_NAME \
          NOTARIZATION_APPLE_ID=$NOTARIZATION_APPLE_ID \
          NOTARIZATION_TEAM_ID=$NOTARIZATION_TEAM_ID \
          NOTARIZATION_PWD=$NOTARIZATION_PWD \
          task build:prod ARCH=${{ matrix.arch }}
          tar -czvf Zen_darwin_${{ matrix.arch }}.tar.gz -C build/bin Zen.app
          mv build/bin/Zen.dmg build/bin/Zen-${{ matrix.arch }}.dmg

          CERTIFICATE_NAME=$CERTIFICATE_NAME \
          NOTARIZATION_APPLE_ID=$NOTARIZATION_APPLE_ID \
          NOTARIZATION_TEAM_ID=$NOTARIZATION_TEAM_ID \
          NOTARIZATION_PWD=$NOTARIZATION_PWD \
          task build:prod-noupdate ARCH=${{ matrix.arch }}
          tar -czvf Zen_darwin_${{ matrix.arch }}_noselfupdate.tar.gz -C build/bin Zen.app
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: macos-${{ matrix.arch }}
          path: |
            Zen_darwin_${{ matrix.arch }}.tar.gz
            build/bin/Zen-${{ matrix.arch }}.dmg
            Zen_darwin_${{ matrix.arch }}_noselfupdate.tar.gz

  build-windows:
    name: Build Windows (${{ matrix.arch }})
    runs-on: windows-2022
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: go.mod
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: frontend/package.json
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
      - uses: arduino/setup-task@b91d5d2c96a56797b48ac1e0e89220bf64044611 # v2.0.0
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build EXEs
        run: |
          # Prepare output directories
          New-Item -Path .\ci-upload -ItemType Directory -Force
          New-Item -Path .\ci-upload\unsigned -ItemType Directory -Force
          New-Item -Path .\ci-upload\signed -ItemType Directory -Force
          New-Item -Path .\ci-upload\final -ItemType Directory -Force

          # build with self-update
          task build:prod ARCH=${{ matrix.arch }}
          Copy-Item .\build\bin\Zen.exe .\ci-upload\unsigned\Zen-selfupdate.exe
          Copy-Item .\build\bin\Zen-${{ matrix.arch }}-installer.exe .\ci-upload\unsigned\Zen-installer.exe

          # build without self-update
          task build:prod-noupdate ARCH=${{ matrix.arch }}
          Copy-Item .\build\bin\Zen.exe .\ci-upload\unsigned\Zen-noselfupdate.exe
      - name: Upload intermediate unsigned artifacts
        id: unsigned
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: windows-unsigned-${{ matrix.arch }}
          path: |
            ci-upload/unsigned/Zen-selfupdate.exe
            ci-upload/unsigned/Zen-noselfupdate.exe
            ci-upload/unsigned/Zen-installer.exe
      - name: Sign with SignPath
        if: startsWith(github.ref, 'refs/tags/v')
        uses: signpath/github-action-submit-signing-request@4f13d373e8f0cd8d3c0465ff4877feff27aed2ae # v1.2
        with:
          api-token:                    ${{ secrets.SIGNPATH_API_TOKEN }}
          organization-id:              ${{ env.SIGNPATH_ORG_ID }}
          project-slug:                 ${{ env.SIGNPATH_PROJECT_SLUG }}
          signing-policy-slug:          ${{ env.SIGNPATH_SIGNING_POLICY_SLUG }}
          artifact-configuration-slug:  ${{ env.SIGNPATH_ARTIFACT_CONFIG_SLUG }}
          github-artifact-id:           ${{ steps.unsigned.outputs.artifact-id }}
          wait-for-completion:          true
          output-artifact-directory:    ci-upload/signed
          parameters: |
            arch: "${{ matrix.arch }}"
            version: "${{ github.ref }}"
      - name: Prepare final artifacts using unsigned artifacts
        if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
        run: |
          Move-Item -Path .\ci-upload\unsigned\Zen-installer.exe `
                          -Destination .\ci-upload\final\Zen-${{ matrix.arch }}-installer.exe
          # Build the self-update archive
          Copy-Item `
            -Path .\ci-upload\unsigned\Zen-selfupdate.exe `
            -Destination .\ci-upload\unsigned\Zen.exe `
            -Force
          Compress-Archive `
            -Path .\ci-upload\unsigned\Zen.exe `
            -DestinationPath .\ci-upload\final\Zen_windows_${{ matrix.arch }}.zip
          Remove-Item -Path .\ci-upload\unsigned\Zen.exe
          # Build the no-self-update archive
          Copy-Item `
            -Path .\ci-upload\unsigned\Zen-noselfupdate.exe `
            -Destination .\ci-upload\unsigned\Zen.exe `
            -Force
          Compress-Archive `
            -Path .\ci-upload\unsigned\Zen.exe `
            -DestinationPath .\ci-upload\final\Zen_windows_${{ matrix.arch }}_noselfupdate.zip
      - name: Prepare final artifacts using signed artifacts
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          Move-Item -Path .\ci-upload\signed\Zen-installer.exe `
                          -Destination .\ci-upload\final\Zen-${{ matrix.arch }}-installer.exe
          # Build the self-update archive
          Copy-Item `
            -Path .\ci-upload\signed\Zen-selfupdate.exe `
            -Destination .\ci-upload\signed\Zen.exe `
            -Force
          Compress-Archive `
            -Path .\ci-upload\signed\Zen.exe `
            -DestinationPath .\ci-upload\final\Zen_windows_${{ matrix.arch }}.zip
          Remove-Item -Path .\ci-upload\signed\Zen.exe
          # Build the no-self-update archive
          Copy-Item `
            -Path .\ci-upload\signed\Zen-noselfupdate.exe `
            -Destination .\ci-upload\signed\Zen.exe `
            -Force
          Compress-Archive `
            -Path .\ci-upload\signed\Zen.exe `
            -DestinationPath .\ci-upload\final\Zen_windows_${{ matrix.arch }}_noselfupdate.zip
      - name: Upload final signed artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: windows-final-${{ matrix.arch }}
          path: |
            ci-upload/final/Zen_windows_${{ matrix.arch }}.zip
            ci-upload/final/Zen_windows_${{ matrix.arch }}_noselfupdate.zip
            ci-upload/final/Zen-${{ matrix.arch }}-installer.exe

  release:
    permissions:
      # https://docs.github.com/en/actions/security-for-github-actions/using-artifact-attestations/using-artifact-attestations-to-establish-provenance-for-builds#generating-build-provenance-for-binaries
      id-token: write
      attestations: write
      # https://github.com/softprops/action-gh-release/issues/236
      contents: write
    name: Attest & Release
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          pattern: linux-*
          path: artifacts
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          pattern: macos-*
          path: artifacts
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          pattern: windows-final-*
          path: artifacts
      - name: Generate artifact attestations
        uses: actions/attest-build-provenance@db473fddc028af60658334401dc6fa3ffd8669fd # v2.3.0
        with:
          subject-path: artifacts/**
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # v2.2.2
        with:
          files: artifacts/**
          tag_name: ${{ github.ref }}
          draft: true
